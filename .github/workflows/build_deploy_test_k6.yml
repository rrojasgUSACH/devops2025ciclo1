name: Build & UI Tests (Local Docker)

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  compose-ui-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Setup Chrome
        uses: browser-actions/setup-chrome@v1

      - name: Build image (Dockerfile)
        run: |
          docker version
          docker build -t conversor:compose .

      - name: Check Docker Compose
        run: docker compose version

      # --- Levanta servicios para UI + PERF ---
      - name: Up (docker compose)
        run: |
          docker compose up -d --build
          # espera hasta 120s a que responda
          for i in {1..120}; do
            if curl -fsS http://localhost:8080/actuator/health >/dev/null 2>&1 || \
               curl -fsS http://localhost:8080/conversor        >/dev/null 2>&1; then
              echo "✅ App arriba"; exit 0; fi
            echo "⏳ Esperando app... ($i/120)"; sleep 1;
          done
          echo "❌ App no levantó en 120s"; docker compose logs --no-color; exit 1

      - name: Run UI tests (Selenium)
        env:
          BASE_URL: http://localhost:8080/conversor
        run: mvn -B -Dtest=ConversorUITest test

      # --- Verifica que la app siga viva antes de k6; si cayó, reinicia ---
      - name: Check & (possible) restart before k6
        run: |
          if ! curl -fsS http://localhost:8080/actuator/health >/dev/null 2>&1 && \
             ! curl -fsS http://localhost:8080/conversor        >/dev/null 2>&1; then
            echo "⚠️ App parece caída; reiniciando servicios..."
            docker compose ps
            docker compose logs --no-color | tail -n 200 || true
            docker compose down -v || true
            docker compose up -d --build
            for i in {1..120}; do
              if curl -fsS http://localhost:8080/actuator/health >/dev/null 2>&1 || \
                 curl -fsS http://localhost:8080/conversor        >/dev/null 2>&1; then
                echo "✅ App nuevamente arriba"; exit 0; fi
              sleep 1
            done
            echo "❌ No se pudo levantar la app tras reinicio"; docker compose logs --no-color | tail -n 200; exit 1
          else
            echo "✅ App sigue viva."
          fi

      # --- k6 script inline (2 escenarios) ---
      - name: Create k6 script
        run: |
          mkdir -p tests/perf
          cat > tests/perf/smoke.js <<'K6'
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          export const options = {
            scenarios: {
              health:     { executor: 'constant-vus', vus: __ENV.VUS?parseInt(__ENV.VUS):10, duration: __ENV.DUR||'1m',  exec: 'health' },
              conversor:  { executor: 'constant-vus', vus: __ENV.VUS2?parseInt(__ENV.VUS2):10,duration: __ENV.DUR2||'1m', exec: 'conversor', startTime: '5s' }
            },
            thresholds: {
              http_req_failed:   ['rate<0.01'],
              http_req_duration: ['p(95)<800'],
            },
          };
          const BASE = __ENV.BASE_URL || 'http://localhost:8080';
          export function health()   { const r=http.get(`${BASE}/actuator/health`); check(r,{ '200':x=>x.status===200 }); sleep(1); }
          export function conversor(){ const r=http.get(`${BASE}/conversor`);       check(r,{ '200':x=>x.status===200 }); sleep(1); }
          K6

      # --- Smoke para PRs (rápido) ---
      - name: Run k6 (smoke on PR)
        if: ${{ github.event_name == 'pull_request' }}
        uses: grafana/k6-action@v0.3.1
        with:
          filename: tests/perf/smoke.js
          flags: --summary-export k6-summary.json
        env:
          BASE_URL: http://localhost:8080
          VUS: "5"
          DUR: "45s"
          VUS2: "5"
          DUR2: "45s"

      # --- Carga para main (más exigente) ---
      - name: Run k6 (load on main)
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        uses: grafana/k6-action@v0.3.1
        with:
          filename: tests/perf/smoke.js
          flags: --summary-export k6-summary.json
        env:
          BASE_URL: http://localhost:8080
          VUS: "25"
          DUR: "3m"
          VUS2: "25"
          DUR2: "3m"

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-reports-compose
          path: target/surefire-reports

      - name: Upload k6 summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: k6-summary
          path: k6-summary.json

      - name: Logs (on failure)
        if: failure()
        run: docker compose logs --no-color > compose-logs.txt

      - name: Upload compose logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: compose-logs
          path: compose-logs.txt

      - name: Down
        if: always()
        run: docker compose down -v
