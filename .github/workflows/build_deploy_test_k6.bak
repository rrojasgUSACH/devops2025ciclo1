name: Build & UI Tests (Local Docker)

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  terraform-ui-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Setup Chrome
        uses: browser-actions/setup-chrome@v1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      # Terraform construye imagen/conteneriza local (docker provider, etc.)
      - name: Terraform Init
        working-directory: infra/terraform
        run: terraform init -input=false

      - name: Terraform Apply
        working-directory: infra/terraform
        run: terraform apply -auto-approve -input=false

      # Lee outputs y los exporta a env
      - name: Read TF outputs
        id: tfout
        working-directory: infra/terraform
        run: |
          OUT=$(terraform output -json)
          echo "$OUT" | jq -r '.base_url.value'  | sed 's#/*$#/#' > /tmp/base_url
          echo "$OUT" | jq -r '.base_path.value' | sed 's#^/*#/#; s#/*$#/#' > /tmp/base_path
          echo "BASE_URL=$(cat /tmp/base_url | sed 's#/$##')" >> $GITHUB_ENV
          echo "BASE_PATH=$(cat /tmp/base_path)" >> $GITHUB_ENV
          echo "TF_BASE_URL=$(cat /tmp/base_url)"
          echo "TF_BASE_PATH=$(cat /tmp/base_path)"

      # Espera a que la app responda (usa BASE_URL/PATH devolvidos por Terraform)
      - name: Esperar app
        run: |
          URL="${BASE_URL}${BASE_PATH}actuator/health"
          ALT="${BASE_URL}${BASE_PATH}"
          echo "Esperando salud en: $URL"
          for i in {1..180}; do
            if curl -fsS "$URL" >/dev/null 2>&1 || curl -fsS "$ALT" >/dev/null 2>&1; then
              echo "✅ App arriba"; break; fi
            echo "⏳ Esperando app... ($i/180)"; sleep 1
          done
          docker ps || true

      - name: Run UI tests (Selenium)
        env:
          BASE_URL: ${{ env.BASE_URL }}${{ env.BASE_PATH }}conversor
        run: mvn -B -Dtest=ConversorUITest test

      # Re-verifica antes de k6 (si cayó durante UI, vuelve a intentar una vez)
      - name: Ensure app alive before k6
        run: |
          URL="${BASE_URL}${BASE_PATH}actuator/health"
          if ! curl -fsS "$URL" >/dev/null 2>&1; then
            echo "⚠️ App caída tras UI. Reintentando 60s..."
            for i in {1..60}; do
              curl -fsS "$URL" >/dev/null 2>&1 && { echo "✅ Volvió"; exit 0; }
              sleep 1
            done
            echo "❌ App no respondió tras reintento"; docker ps -a; exit 1
          fi

      # Script k6 inline (respeta BASE_PATH)
      - name: Create k6 script
        run: |
          mkdir -p tests/perf
          cat > tests/perf/smoke.js <<'K6'
          import http from 'k6/http';
          import { check, sleep } from 'k6';
          const BASE = __ENV.BASE_URL || 'http://localhost:8080';
          const PATH = (__ENV.BASE_PATH || '/');
          export const options = {
            scenarios: {
              health:    { executor: 'constant-vus', vus: __ENV.VUS?parseInt(__ENV.VUS):10, duration: __ENV.DUR||'1m',  exec: 'health' },
              conversor: { executor: 'constant-vus', vus: __ENV.VUS2?parseInt(__ENV.VUS2):10, duration: __ENV.DUR2||'1m', exec: 'conversor', startTime: '5s' }
            },
            thresholds: {
              http_req_failed:   ['rate<0.01'],
              http_req_duration: ['p(95)<800'],
            },
          };
          export function health()   { const r=http.get(`${BASE}${PATH}actuator/health`); check(r,{ '200':x=>x.status===200 }); sleep(1); }
          export function conversor(){ const r=http.get(`${BASE}${PATH}conversor`);       check(r,{ '200':x=>x.status===200 }); sleep(1); }
          K6

      # Smoke (PR)
      - name: Run k6 (smoke on PR)
        if: ${{ github.event_name == 'pull_request' }}
        uses: grafana/k6-action@v0.3.1
        with:
          filename: tests/perf/smoke.js
          flags: --summary-export k6-summary.json
        env:
          BASE_URL: ${{ env.BASE_URL }}
          BASE_PATH: ${{ env.BASE_PATH }}
          VUS: "5"
          DUR: "45s"
          VUS2: "5"
          DUR2: "45s"

      # Carga (main)
      - name: Run k6 (load on main)
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        uses: grafana/k6-action@v0.3.1
        with:
          filename: tests/perf/smoke.js
          flags: --summary-export k6-summary.json
        env:
          BASE_URL: ${{ env.BASE_URL }}
          BASE_PATH: ${{ env.BASE_PATH }}
          VUS: "25"
          DUR: "3m"
          VUS2: "25"
          DUR2: "3m"

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: surefire-reports-terraform
          path: target/surefire-reports

      - name: Upload k6 summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: k6-summary
          path: k6-summary.json

      # Logs útiles si algo sale mal
      - name: Docker state (on failure)
        if: failure()
        run: |
          docker ps -a || true
          docker logs $(docker ps -aq | head -n1) --tail 200 || true

      - name: Terraform Destroy (always)
        if: always()
        working-directory: infra/terraform
        run: terraform destroy -auto-approve -input=false
